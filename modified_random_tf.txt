library(palaeoSig)
library(rioja)
library(vegan)
library(stats)
library(sp)
library(gstat)
library(dplyr)
library(tibble)
library(tidyr)
library(purrr)
library(ggplot2)



randomTF_ml <- function(spp, env, fos,recon_matrix,
                        condition, autosim, ord = rda, 
                        permute = FALSE,
                        models,
                        make_models = FALSE, ...){
  
  #Check env is data.frame or vector
  if(!is.data.frame(env) & !is.vector(env)){
    stop("env must be a data.frame containing one or more environemental
         variables, or vector containing a single environemental variable")
  }
  
  #force data to be a data.frame
  if (!is.data.frame(env)){
    env <- data.frame(env = env)
  }
  rownames(spp) <- seq_len(nrow(spp))
  
  #check env and spp have same number of rows
  if(!identical(nrow(spp), nrow(env))){
    stop("spp and env must have same number of rows")
  }
  
  #permute and autosim don't play together
  if(isTRUE(permute) & !missing(autosim)){
    stop("permute does not make sense if autosim is provided")
  }
  
  #check only one variable if permute is true
  if(isTRUE(permute) & length(env) > 1){
    stop("permute is only possible with one environmental variable")
  }
  
  #check condition is data.frame and fos have same number of rows
  partial <- !missing(condition)
  if(partial){
    if(!is.data.frame(condition)){
      stop("condition must be a data.frame of reconstructions to partial out")
    }
    if(!identical(nrow(fos), nrow(condition))){
      stop("fos and condition must have the same number of rows")
    }
  }
  
  #make_models only?
  if(!missing(make_models)){
    make_models <- isTRUE(make_models)
  }else{
    make_models <- FALSE   
  }
  
  #MAT and make_models don't work well together
  
  
  if(make_models & !missing(models)){
    stop("If make_models is true, no not provide models")
  }
  
  if (!missing(models)) {
    if (class(models) != "model_list") {
      stop("models must be a model_list made by running 
           randomTF with make_models = TRUE")
    }
  }  
  
  #if MAT, for speed, drop training set samples that are never analogues.
  
  
  #find inertia explained by first axis of unconstrained ordination
  if (!make_models) {#only if not in make_model mode
    if (!partial) {
      PC <- ord(fos)
    } else{
      conditions <- paste(names(condition), collapse = "+")
      form1 <- formula(paste("fos ~ 1 + Condition(", conditions, ")"))
      PC <- ord(form1, data = condition)
    }
    MAX <- PC$CA$eig[1] / PC$tot.chi
    
    # Find inertia explained by reconstructions
    
    
    
    p = recon_matrix[,1]
    if (!partial) {
      RDA <- ord(fos ~ p)
    } else{
      form <- formula(paste("fos ~ p + Condition(", conditions, ")"))
      RDA <- ord(form, data = condition)
    }
    
    add_list <- list(
      EX = RDA$CCA$tot.chi / RDA$tot.chi,
      pred = p,
      EIG1 = RDA$CA$eig[1] / RDA$tot.chi,
      mod = p
    )
    obs <- list(add_list)
    
  }
  
  # simulations using random data  
  #make random environmental variables
  # emited
  
  if (missing(models)) {
    #precalculated models not provided
    sim.ex <- apply(recon_matrix[,2:dim(recon_matrix)[2]], 2, function(sim) {
      p <- sim
      if (!partial) {
        r <- ord(fos ~ p)
      }
      else {
        form <- formula(paste("fos ~ p + Condition(", 
                              conditions, ")"))
        r <- ord(form, data = condition)
      }
      r$CCA$tot.chi/r$tot.chi
    })
  }
  
  
  
  res <- lst(
    PCA = PC,
    preds = purrr::map(obs, "pred"),
    MAX = MAX,
    EX = map_dbl(obs, "EX"),
    eig1 = map_dbl(obs, "EIG1"),
    sim.ex = sim.ex,
    sig = map_dbl(.data$EX, function(E) mean(E <= c(E, sim.ex)))
  )
  class(res) <- "palaeoSig"
  return(res)
}



randomTF_v2 <- function(spp, env, fos, n = 99, fun, col,
                        condition, autosim, ord = rda, 
                        permute = FALSE,
                        models,
                        make_models = FALSE, ...){
  
  #Check env is data.frame or vector
  if(!is.data.frame(env) & !is.vector(env)){
    stop("env must be a data.frame containing one or more environemental
         variables, or vector containing a single environemental variable")
  }
  
  #force data to be a data.frame
  if (!is.data.frame(env)){
    env <- data.frame(env = env)
  }
  rownames(spp) <- seq_len(nrow(spp))
  
  #check env and spp have same number of rows
  if(!identical(nrow(spp), nrow(env))){
    stop("spp and env must have same number of rows")
  }
  
  #permute and autosim don't play together
  if(isTRUE(permute) & !missing(autosim)){
    stop("permute does not make sense if autosim is provided")
  }
  
  #check only one variable if permute is true
  if(isTRUE(permute) & length(env) > 1){
    stop("permute is only possible with one environmental variable")
  }
  
  #check condition is data.frame and fos have same number of rows
  partial <- !missing(condition)
  if(partial){
    if(!is.data.frame(condition)){
      stop("condition must be a data.frame of reconstructions to partial out")
    }
    if(!identical(nrow(fos), nrow(condition))){
      stop("fos and condition must have the same number of rows")
    }
  }
  
  #make_models only?
  if(!missing(make_models)){
    make_models <- isTRUE(make_models)
  }else{
    make_models <- FALSE   
  }
  
  #MAT and make_models don't work well together
  if(identical(fun, MAT) & make_models){
    stop("MAT and make_models don't work together because
         a shortcut is used to speed up MAT")
  }
  
  if(make_models & !missing(models)){
    stop("If make_models is true, no not provide models")
  }
  
  if (!missing(models)) {
    if (class(models) != "model_list") {
      stop("models must be a model_list made by running 
           randomTF with make_models = TRUE")
    }
  }  
  
  #if MAT, for speed, drop training set samples that are never analogues.
  if (identical(fun, MAT)) {
    mod1 <- predict(MAT(spp, env[[1]], ...), fos)
    analogues <- unique(as.vector(as.numeric(mod1$match.name)))
    spp <- spp[analogues, ]
    env <- env[analogues, , drop = FALSE]
    rownames(spp) <- seq_len(nrow(spp))
    if (!missing(autosim)) {
      autosim <- autosim[analogues, , drop = FALSE]
    }
  }
  
  #find inertia explained by first axis of unconstrained ordination
  if (!make_models) {#only if not in make_model mode
    if (!partial) {
      PC <- ord(fos)
    } else{
      conditions <- paste(names(condition), collapse = "+")
      form1 <- formula(paste("fos ~ 1 + Condition(", conditions, ")"))
      PC <- ord(form1, data = condition)
    }
    MAX <- PC$CA$eig[1] / PC$tot.chi
    
    # Find inertia explained by reconstructions
    obs <- lapply(env, function(ev) {
      Mod <- fun(spp, ev, ...)
      Pred <- predict(Mod, fos)
      if (is.list(Pred)) {
        p <- Pred$fit[, col]
      }
      else {
        p <- Pred
      }
      if (!partial) {
        RDA <- ord(fos ~ p)
      } else{
        form <- formula(paste("fos ~ p + Condition(", conditions, ")"))
        RDA <- ord(form, data = condition)
      }
      
      list(
        EX = RDA$CCA$tot.chi / RDA$tot.chi,
        pred = p,
        EIG1 = RDA$CA$eig[1] / RDA$tot.chi,
        mod = Pred
      )
    })
  }
  
  # simulations using random data  
  #make random environmental variables
  if (!missing(autosim)) {
    #check autosim has correct size
    if(nrow(autosim) != nrow(env)){
      stop("autosim must have same number of rows as env")
    }
    rnd <- autosim
  } else if(isTRUE(permute)){
    rnd <- replicate(n = n, sample(env[[1]]), simplify = TRUE)
  }else{
    rnd <- matrix(runif(nrow(spp) * n), ncol = n)
  }
  
  #if MAT, can take shortcut as always same analogues chosen
  if (identical(fun, MAT)) {
    selected_analogues <- apply(obs[[1]]$mod$match.name, 2, as.numeric)
    p <- apply(selected_analogues, 1, function(n){
      colMeans(rnd[n, ])})
    sim.ex <- apply(p, 1, function(pp) {
      if (!partial) {
        r <- ord(fos ~ pp)
      } else{
        form <- formula(paste("fos ~ pp + Condition(", conditions, ")"))
        r <- ord(form, data = condition)
      }
      r$CCA$tot.chi / r$tot.chi
    })
  }
  else{
    if (missing(models)) {
      #precalculated models not provided
      sim.ex <- apply(rnd, 2, function(sim) {
        m <- fun(spp, sim)
        p <- predict(m, fos)
        if (is.list(p)) 
          p <- p$fit[, col]
        if (!partial) {
          r <- ord(fos ~ p)
        }
        else {
          form <- formula(paste("fos ~ p + Condition(", 
                                conditions, ")"))
          r <- ord(form, data = condition)
        }
        r$CCA$tot.chi/r$tot.chi
      })
    }
    
  }
  
  res <- lst(
    PCA = PC,
    preds = purrr::map(obs, "pred"),
    MAX = MAX,
    EX = map_dbl(obs, "EX"),
    eig1 = map_dbl(obs, "EIG1"),
    sim.ex = sim.ex,
    sig = map_dbl(.data$EX, function(E) mean(E <= c(E, sim.ex)))
  )
  class(res) <- "palaeoSig"
  return(res)
}




randomTF_twapls <- function(spp, env, fos, n = 99, fun, col,
                            condition, autosim, ord = rda, 
                            permute = FALSE,
                            models,
                            make_models = FALSE, ...){
  
  #Check env is data.frame or vector
  if(!is.data.frame(env) & !is.vector(env)){
    stop("env must be a data.frame containing one or more environemental
         variables, or vector containing a single environemental variable")
  }
  
  #force data to be a data.frame
  if (!is.data.frame(env)){
    env <- data.frame(env = env)
  }
  rownames(spp) <- seq_len(nrow(spp))
  
  #check env and spp have same number of rows
  if(!identical(nrow(spp), nrow(env))){
    stop("spp and env must have same number of rows")
  }
  
  #permute and autosim don't play together
  if(isTRUE(permute) & !missing(autosim)){
    stop("permute does not make sense if autosim is provided")
  }
  
  #check only one variable if permute is true
  if(isTRUE(permute) & length(env) > 1){
    stop("permute is only possible with one environmental variable")
  }
  
  #check condition is data.frame and fos have same number of rows
  partial <- !missing(condition)
  if(partial){
    if(!is.data.frame(condition)){
      stop("condition must be a data.frame of reconstructions to partial out")
    }
    if(!identical(nrow(fos), nrow(condition))){
      stop("fos and condition must have the same number of rows")
    }
  }
  
  #make_models only?
  if(!missing(make_models)){
    make_models <- isTRUE(make_models)
  }else{
    make_models <- FALSE   
  }
  
  #MAT and make_models don't work well together
  
  
  if(make_models & !missing(models)){
    stop("If make_models is true, no not provide models")
  }
  
  if (!missing(models)) {
    if (class(models) != "model_list") {
      stop("models must be a model_list made by running 
           randomTF with make_models = TRUE")
    }
  }  
  
  
  
  #find inertia explained by first axis of unconstrained ordination
  if (!make_models) {#only if not in make_model mode
    if (!partial) {
      PC <- ord(fos)
    } else{
      conditions <- paste(names(condition), collapse = "+")
      form1 <- formula(paste("fos ~ 1 + Condition(", conditions, ")"))
      PC <- ord(form1, data = condition)
    }
    MAX <- PC$CA$eig[1] / PC$tot.chi
    
    # Find inertia explained by reconstructions
    obs <- lapply(env, function(ev) {
      Mod <- fxTWAPLS::TWAPLS.w(modern_taxa = spp,
                                modern_climate = ev,
                                nPLS = col,
                                usefx = FALSE,
                                fx_method = "bin",
                                bin = 0.02)
      ## Predict
      
      Pred <- fxTWAPLS::TWAPLS.predict.w(Mod, fos)
      if (is.list(Pred)) {
        p <- Pred$fit[, col]
      }
      else {
        p <- Pred
      }
      if (!partial) {
        RDA <- ord(fos ~ p)
      } else{
        form <- formula(paste("fos ~ p + Condition(", conditions, ")"))
        RDA <- ord(form, data = condition)
      }
      
      list(
        EX = RDA$CCA$tot.chi / RDA$tot.chi,
        pred = p,
        EIG1 = RDA$CA$eig[1] / RDA$tot.chi,
        mod = Pred
      )
    })
  }
  
  # simulations using random data  
  #make random environmental variables
  if (!missing(autosim)) {
    #check autosim has correct size
    if(nrow(autosim) != nrow(env)){
      stop("autosim must have same number of rows as env")
    }
    rnd <- autosim
  } else if(isTRUE(permute)){
    rnd <- replicate(n = n, sample(env[[1]]), simplify = TRUE)
  }else{
    rnd <- matrix(runif(nrow(spp) * n), ncol = n)
  }
  
  #if MAT, can take shortcut as always same analogues chosen
  if (identical(fun, MAT)) {
    selected_analogues <- apply(obs[[1]]$mod$match.name, 2, as.numeric)
    p <- apply(selected_analogues, 1, function(n){
      colMeans(rnd[n, ])})
    sim.ex <- apply(p, 1, function(pp) {
      if (!partial) {
        r <- ord(fos ~ pp)
      } else{
        form <- formula(paste("fos ~ pp + Condition(", conditions, ")"))
        r <- ord(form, data = condition)
      }
      r$CCA$tot.chi / r$tot.chi
    })
  }
  else{
    if (missing(models)) {
      #precalculated models not provided
      sim.ex <- apply(rnd, 2, function(sim) {
        m <- fxTWAPLS::TWAPLS.w(modern_taxa = spp,
                                modern_climate = sim,
                                nPLS = col,
                                usefx = FALSE,
                                fx_method = "bin",
                                bin = 0.02)
        ## Predict
        
        p <- fxTWAPLS::TWAPLS.predict.w(m, fos)
        if (is.list(p)) 
          p <- p$fit[, col]
        if (!partial) {
          r <- ord(fos ~ p)
        }
        else {
          form <- formula(paste("fos ~ p + Condition(", 
                                conditions, ")"))
          r <- ord(form, data = condition)
        }
        r$CCA$tot.chi/r$tot.chi
      })
    }
    
  }
  
  res <- lst(
    PCA = PC,
    preds = purrr::map(obs, "pred"),
    MAX = MAX,
    EX = map_dbl(obs, "EX"),
    eig1 = map_dbl(obs, "EIG1"),
    sim.ex = sim.ex,
    sig = map_dbl(.data$EX, function(E) mean(E <= c(E, sim.ex)))
  )
  class(res) <- "palaeoSig"
  return(res)
}

